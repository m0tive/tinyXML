/** @page iterating Iterating Over Documents
<i> Andrew Ellerton April 2004 </i>

<h2> Dump structure of a Document to STDOUT </h2>

Often when you're starting its helpful and reassuring to
know that you're document got loaded as you expect it to.

Below I've defined a function to walk a document and write
contents to STDOUT:

	@verbatim
	// a utility function defining a very simple method to indent a line of text
	const char * getIndent( unsigned int numIndents )
	{
		static const char * pINDENT = "                                      + ";
		static const unsigned int LENGTH = strlen( pINDENT );
	
		if ( numIndents > LENGTH ) numIndents = LENGTH;
	
		return &pINDENT[ LENGTH-numIndents ];
	}
	
	void dump_to_stdout( TiXmlNode * pParent, unsigned int indent = 0 )
	{
		if ( !pParent ) return;
	
		TiXmlText *pText;
		int t = pParent->Type();
		printf( "%s", getIndent( indent));
	
		switch ( t )
		{
		case TiXmlNode::DOCUMENT:
			printf( "Document" );
			break;
	
		case TiXmlNode::ELEMENT:
			printf( "Element \"%s\"", pParent->Value() );
			break;
	
		case TiXmlNode::COMMENT:
			printf( "Comment: \"%s\"", pParent->Value());
			break;
	
		case TiXmlNode::UNKNOWN:
			printf( "Unknown" );
			break;
	
		case TiXmlNode::TEXT:
			pText = pParent->ToText();
			printf( "Text: [%s]", pText->Value() );
			break;
	
		case TiXmlNode::DECLARATION:
			printf( "Declaration" );
			break;
		default:
			break;
		}
		printf( "\n" );
	
		TiXmlNode * pChild;
	
		for ( pChild = pParent->FirstChild(); pChild != 0; pChild = pChild->NextSibling()) 
		{
			dump_to_stdout( pChild, indent+2 );
		}
	}
	@endverbatim

	
To load a file and dump its structure::

	@verbatim
	void load_and_display( )
	{
		// important for the poetry demo, but you may not need this 
		// in your own projects
		TiXmlBase::SetCondenseWhiteSpace( false );
	
		TiXmlDocument doc( "demo.xml" );
		bool loadOkay = doc.LoadFile();
	
		if ( loadOkay )
		{
			dump_to_stdout( &doc );
		}
		else
		{
			printf( "Something went wrong\n" );
		}
	}
	@endverbatim

If you run this with the first XML file you'll see this 
on STDOUT::

	@verbatim
	DOCUMENT
	+ DECLARATION
	+ ELEMENT Hello
	  + TEXT[World]
	@endverbatim

and on the second XML file::

	@verbatim
	DOCUMENT
	+ DECLARATION
	+ ELEMENT poetry
	  + COMMENT:  my great work of art
	  + ELEMENT verse
	    + TEXT[
	Alas
	  Great Whatever
	    Alas (again)
	]
	@endverbatim


Note that if you call dump_to_stdout like this::

	@verbatim
	dump_to_stdout( doc.RootElement());
	@endverbatim

You'll see this instead:

	@verbatim
	ELEMENT Hello
	+ TEXT[World]
	@endverbatim

and:

	@verbatim
	ELEMENT poetry
	+ COMMENT:  my great work of art
	+ ELEMENT verse
  	+ TEXT[
	Alas
	  Great Whatever
	    Alas (again)
	] 
	@endverbatim

*/